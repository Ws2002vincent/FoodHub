package foodhub.vendor;

import java.awt.*;
import java.io.*;
import java.nio.file.*;
import java.util.logging.*;
import javax.swing.*;

public class EditItem extends javax.swing.JPanel {

    private String foodID;
    private String selectedImagePath;
    private JDialog parentDialog;
    private ItemListingPage itemListingPage;

    public EditItem(String foodID, String itemName, String description, double price, String imagePath, JDialog parentDialog, ItemListingPage itemListingPage) {
        initComponents();
        this.foodID = foodID;
        this.parentDialog = parentDialog;
        this.itemListingPage = itemListingPage;

        // Retrieve item data
        try {
            retrieveItemDetails(foodID);
        } catch (IOException ex) {
            Logger.getLogger(EditItem.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error retrieving item details!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void retrieveItemDetails(String foodID) throws IOException {
        String line;

        try (BufferedReader foodRead = new BufferedReader(new FileReader("C:\\FoodHub\\src\\foodhub\\Database\\Menuinfo.txt"))) {
            while ((line = foodRead.readLine()) != null) {
                String[] data = line.split("\\|");
                for (int i = 0; i < data.length; i++) {
                    data[i] = data[i].trim();
                }

                if (data[0].equals(foodID)) {
                    nameTxt.setText(data[1]); // Item name
                    desTxt.setText(data[2]);  // Description
                    priceTxt.setText(data[3]); // Price
                    availabilityBox.setSelectedItem(data[4]); // Availability

                    // Image
                    String imagePath = data[5];
                    selectedImagePath = imagePath; // Store image path internally
                    ImageIcon foodImage = new ImageIcon(selectedImagePath);

                    SwingUtilities.invokeLater(() -> {
                        if (imageLbl.getWidth() > 0 && imageLbl.getHeight() > 0) {
                            Image resizedFoodImage = foodImage.getImage().getScaledInstance(
                                    imageLbl.getWidth(),
                                    imageLbl.getHeight(),
                                    Image.SCALE_SMOOTH
                            );
                            imageLbl.setIcon(new ImageIcon(resizedFoodImage));
                        }
                    });

                    break;
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLbl = new javax.swing.JLabel();
        imageLbl = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        uploadLbl = new javax.swing.JLabel();
        priceLbl = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        availabilityLbl = new javax.swing.JLabel();
        desLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        desTxt = new javax.swing.JTextArea();
        availabilityBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        saveBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        nameLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        nameLbl.setText("Name");
        nameLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        imageLbl.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        imageLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageLbl.setText("+");
        imageLbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        imageLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imageLblMouseClicked(evt);
            }
        });

        nameTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        uploadLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        uploadLbl.setText("Upload Image");
        uploadLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        priceLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        priceLbl.setText("Price (RM)");
        priceLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        priceTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        availabilityLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        availabilityLbl.setText("Availability");
        availabilityLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        desLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        desLbl.setText("Description");

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        desTxt.setColumns(20);
        desTxt.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        desTxt.setRows(5);
        jScrollPane1.setViewportView(desTxt);

        availabilityBox.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        availabilityBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Not Available" }));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Edit Item");

        saveBtn.setBackground(new java.awt.Color(0, 0, 0));
        saveBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        saveBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveBtn.setText("Save Changes");
        saveBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(saveBtn))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(desLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(priceTxt)
                                    .addComponent(availabilityBox, 0, 258, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(nameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(availabilityLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                                        .addComponent(nameTxt)))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(imageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                                    .addComponent(uploadLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLbl)
                    .addComponent(uploadLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(priceLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(availabilityLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availabilityBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addComponent(desLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(saveBtn)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        boolean validName = true;
        boolean validPrice = true;
        boolean validDescription = true;

        String editName = nameTxt.getText().trim();
        String editDescription = desTxt.getText().trim();
        String editAvailability = (String) availabilityBox.getSelectedItem();
        double editPrice = 0.0;

        if (editName.isEmpty()) {
            validName = false;
            setCustomFontForDialogs();
            JOptionPane.showMessageDialog(this, "Name cannot be empty.", "Invalid Name", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String priceText = priceTxt.getText().trim();
        if (priceText.isEmpty()) {
            validPrice = false;
            setCustomFontForDialogs();
            JOptionPane.showMessageDialog(this, "Price cannot be empty.", "Invalid Price", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            try {
                editPrice = Double.parseDouble(priceText);
                if (editPrice < 0 || Double.doubleToRawLongBits(editPrice) == Double.doubleToRawLongBits(-0.0)) {
                    validPrice = false;
                    setCustomFontForDialogs();
                    JOptionPane.showMessageDialog(this, "Price cannot be negative.", "Invalid Price", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } catch (NumberFormatException e) {
                validPrice = false;
                setCustomFontForDialogs();
                JOptionPane.showMessageDialog(this, "Price must be a valid number.", "Invalid Price", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        if (editDescription.isEmpty()) {
            validDescription = false;
            setCustomFontForDialogs();
            JOptionPane.showMessageDialog(this, "Description cannot be empty.", "Invalid Description", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (validName && validPrice && validDescription) {
            // Use the selectedImagePath (stored internally) for saving
            try {
                updateMenuItem(foodID, editName, editDescription, editPrice, editAvailability, selectedImagePath);
                setCustomFontForDialogs();

                JOptionPane.showMessageDialog(this, "Item updated successfully!");

                if (itemListingPage != null) {
                    itemListingPage.refreshItemList();
                    parentDialog.dispose();
                }

                // Close the parent dialog (EditItem.java)
                if (parentDialog != null) {
                    SwingUtilities.invokeLater(() -> {
                        parentDialog.setVisible(false);
                        parentDialog.dispose();
                    });
                }

            } catch (IOException ex) {
                Logger.getLogger(EditItem.class.getName()).log(Level.SEVERE, null, ex);
                return;
            }
        }


    }//GEN-LAST:event_saveBtnActionPerformed

    private void updateMenuItem(String foodID, String name, String description, double price, String availability, String selectedImagePath) throws IOException {
        StringBuilder tempTxt = new StringBuilder();
        String line;

        try (BufferedReader foodRead = new BufferedReader(new FileReader("C:\\FoodHub\\src\\foodhub\\Database\\Menuinfo.txt"))) {
            while ((line = foodRead.readLine()) != null) {
                String[] data = line.split("\\|");
                for (int i = 0; i < data.length; i++) {
                    data[i] = data[i].trim();
                }

                // Update the item details
                if (data[0].equals(foodID)) {
                    data[1] = name;
                    data[2] = description;
                    data[3] = String.valueOf(price);
                    data[4] = availability;
                    data[5] = selectedImagePath;
                }

                tempTxt.append(String.join(" | ", data)).append(System.lineSeparator());
            }
        }

        // Write back the updated data to the file
        try (FileWriter foodWrite = new FileWriter("C:\\FoodHub\\src\\foodhub\\Database\\Menuinfo.txt", false)) {
            foodWrite.write(tempTxt.toString());
        }
    }


    private void imageLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imageLblMouseClicked

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "PNG", "JPEG", "JPG Images", "jpg", "png", "jpeg"));
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // Get selected file path
            this.selectedImagePath = fileChooser.getSelectedFile().getAbsolutePath();

            ImageIcon imageIcon = new ImageIcon(selectedImagePath);
            Image resizedImage = imageIcon.getImage().getScaledInstance(
                    imageLbl.getWidth(),
                    imageLbl.getHeight(),
                    Image.SCALE_SMOOTH
            );
            imageLbl.setText("");
            imageLbl.setIcon(new ImageIcon(resizedImage));

            String imagesFolderPath = "C:\\FoodHub\\src\\foodhub\\images";
            File imagesFolder = new File(imagesFolderPath);

            // Create the folder if it doesn't exist
            if (!imagesFolder.exists()) {
                imagesFolder.mkdirs();
            }

            File imageFile = new File(selectedImagePath);
            String imageFileName = imageFile.getName(); // Extract the file name
            File destinationFile = new File(imagesFolder, imageFileName);

            // Copy the image to the images folder
            try {
                Files.copy(imageFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                selectedImagePath = imageFileName;

            } catch (IOException ex) {
                Logger.getLogger(EditItem.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Error saving the image!", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_imageLblMouseClicked

    private void setCustomFontForDialogs() {
        Font customFont = new Font("Segoe UI", Font.PLAIN, 16);
        UIManager.put("OptionPane.messageFont", customFont);
        UIManager.put("OptionPane.buttonFont", customFont);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> availabilityBox;
    private javax.swing.JLabel availabilityLbl;
    private javax.swing.JLabel desLbl;
    private javax.swing.JTextArea desTxt;
    private javax.swing.JLabel imageLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JLabel priceLbl;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JLabel uploadLbl;
    // End of variables declaration//GEN-END:variables
}
